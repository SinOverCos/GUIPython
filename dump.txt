## Just a ScrollView
class StampList(ScrollView):
    def __init__(self, **kwargs):
        super(StampList, self).__init__(**kwargs)
        ##self.scroll_distance = 20px default, need to scroll 20 to start scroll
        ##self.scroll_timeout = 250ms default, after this scroll no longer scrolls
        self.stamp_dict = None

    ## Procedures to draw out needed stamp items
    def list_stamps(self):
        self.clear_widgets()
        self.read_stamps_from_file("gameoflifestamps.txt")
        print self.stamp_dict
        for stamp in self.stamp_dict:
            self.add_widget(StampItem(stamp, self.stamp_dict[stamp]))

## A stamp item, includes the stamp name and its thumbnail
class StampItem(BoxLayout):
    def __init__(self, name, thumbnail, **kwargs):
        super(StampItem, self).__init__(**kwargs)
        self.name = name
        self.thumbnail = thumbnail
        self.orientation = "horizontal"
        self.size_hint_x = 1
        self.height = Window.height/7

        self.add_widget(StampName(self.name))
        self.add_widget(StampThumbnail(self.thumbnail))
        self.add_widget(DeleteStampButton())

    def on_touch_down(self, touch):
        ## change colour if not on button
        return False

    def on_touch_move(self, touch):
        ## check if still selected - change colour accordingly if not on button
        return False

    def on_touch_up(self, touch):
        ## if touch up here, then select this if not on button
        return False


## A label for the stamp name
class StampName(Label):
    def __init__(self, name, **kwargs):
        super(StampName, self).__init__(**kwargs)
        self.size_hint_x = 0.4 # Name takes up little less than half of horizontal space
        self.text = name
        self.font_size = 30 # Need to change to be relative to screen size


## Grid for drawing out a stamp's thumbnail
class StampThumbnail(GridLayout):
    def __init__(self, thumbnail, **kwargs):
        super(StampThumbnail, self).__init__(**kwargs)
        self.size_hint_x = 0.3
        self.rows = 1
        self.cols = 1


## Button for deleting saved stamps
class DeleteStampButton(Button):
    def __init__(self, **kwargs):
        super(DeleteStampButton, self).__init__(**kwargs)
        self.size_hint_x = 0.3
        self.text = "Delete"
        self.font_size = 30

    def on_release(self):
        ## just remove, but don't redraw - hopefully scroll will stay in
        ## same place
        ## make changes to the dict so the deleted stamp doesnt
        ## show up next time
        print "Need to look for the dict"










    ## Delete all tiles, update tile size, add new number of tiles back
    def update_tile_size(self, new_tile_size):
        new_tile_size = str(new_tile_size)
        clean_number = ""
        str_numbers = ['.', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
        for char in new_tile_size:
            if char in str_numbers:
                clean_number += char

        try:
            # Try statement in case no user enters no numeric character
            new_tile_size = int(clean_number)
            if new_tile_size == 0:
                print "That's ridiculous - let's do size = 1."
                new_tile_size = 1
        except:
            ## Does nothing in the app.
            print "Invalid input given for new tile size."
            return
        
        print "Original tile size as per grid: ", self.grid.side_len
        print "Original tile size as per tile: ", Tile.side_len
        print "Original number of rows as per grid: ", self.grid.rows
        print "Original number of rows as per tile: ", Tile.rows
        print "Original number of cols as per grid: ", self.grid.cols
        print "Original number of cols as per tile: ", Tile.cols
        print "Original number of tiles: ", self.grid.tiles

        self.grid.clear_widgets()
        self.grid.side_len = new_tile_size
        self.grid.update_rct()
        Tile.side_len = new_tile_size
        Tile.update_rc()

        print "New tile size as per grid: ", self.grid.side_len
        print "New tile size as per tile: ", Tile.side_len
        print "New number of rows as per grid: ", self.grid.rows
        print "New number of rows as per tile: ", Tile.rows
        print "New number of cols as per grid: ", self.grid.cols
        print "New number of cols as per tile: ", Tile.cols
        print "New number of tiles: ", self.grid.tiles

        self.build_grid()
        
        # Any saved state would be invalid now
        self.grid.initial_state = None        

